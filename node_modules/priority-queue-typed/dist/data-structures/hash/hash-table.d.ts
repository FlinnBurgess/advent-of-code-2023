/**
 * data-structure-typed
 *
 * @author Tyler Zeng
 * @copyright Copyright (c) 2022 Tyler Zeng <zrwusa@gmail.com>
 * @license MIT License
 */
import type { HashFunction } from '../../types';
export declare class HashTableNode<K = any, V = any> {
    key: K;
    value: V;
    next: HashTableNode<K, V> | undefined;
    constructor(key: K, value: V);
}
export declare class HashTable<K = any, V = any> {
    protected static readonly DEFAULT_CAPACITY = 16;
    protected static readonly LOAD_FACTOR = 0.75;
    constructor(capacity?: number, hashFn?: HashFunction<K>);
    protected _capacity: number;
    get capacity(): number;
    protected _size: number;
    get size(): number;
    protected _buckets: Array<HashTableNode<K, V> | undefined>;
    get buckets(): Array<HashTableNode<K, V> | undefined>;
    protected _hashFn: HashFunction<K>;
    get hashFn(): HashFunction<K>;
    /**
     * The set function adds a key-value pair to the hash table, handling collisions and resizing if necessary.
     * @param {K} key - The key parameter represents the key of the key-value pair that you want to insert into the hash
     * table. It is of type K, which is a generic type representing the key's data type.
     * @param {V} value - The parameter `value` represents the value that you want to associate with the given key in the hash
     * table.
     * @returns Nothing is being returned. The return type of the `put` method is `void`, which means it does not return any
     * value.
     */
    set(key: K, value: V): void;
    /**
     * The `get` function retrieves the value associated with a given key from a hash table.
     * @param {K} key - The `key` parameter represents the key of the element that we want to retrieve from the data
     * structure.
     * @returns The method is returning the value associated with the given key if it exists in the hash table. If the key is
     * not found, it returns `undefined`.
     */
    get(key: K): V | undefined;
    /**
     * The delete function removes a key-value pair from a hash table.
     * @param {K} key - The `key` parameter represents the key of the key-value pair that needs to be removed from the hash
     * table.
     * @returns Nothing is being returned. The `delete` method has a return type of `void`, which means it does not return
     * any value.
     */
    delete(key: K): void;
    [Symbol.iterator](): Generator<[K, V], void, undefined>;
    forEach(callback: (entry: [K, V], index: number, table: HashTable<K, V>) => void): void;
    filter(predicate: (entry: [K, V], index: number, table: HashTable<K, V>) => boolean): HashTable<K, V>;
    map<T>(callback: (entry: [K, V], index: number, table: HashTable<K, V>) => T): HashTable<K, T>;
    reduce<T>(callback: (accumulator: T, entry: [K, V], index: number, table: HashTable<K, V>) => T, initialValue: T): T;
    /**
     * The function `_defaultHashFn` calculates the hash value of a given key and returns the remainder when divided by the
     * capacity of the data structure.
     * @param {K} key - The `key` parameter is the input value that needs to be hashed. It can be of any type, but in this
     * code snippet, it is checked whether the key is a string or an object. If it is a string, the `_murmurStringHashFn`
     * function is used to
     * @returns the hash value of the key modulo the capacity of the data structure.
     */
    protected _defaultHashFn(key: K): number;
    /**
     * The `_multiplicativeStringHashFn` function calculates a hash value for a given string key using the multiplicative
     * string hash function.
     * @param {K} key - The `key` parameter is the input value for which we want to calculate the hash. It can be of any
     * type, as it is generic (`K`). The function converts the `key` to a string using the `String()` function.
     * @returns a number, which is the result of the multiplicative string hash function applied to the input key.
     */
    protected _multiplicativeStringHashFn<K>(key: K): number;
    /**
     * The function `_murmurStringHashFn` calculates a hash value for a given string key using the MurmurHash algorithm.
     * @param {K} key - The `key` parameter is the input value for which you want to calculate the hash. It can be of any
     * type, but it will be converted to a string using the `String()` function before calculating the hash.
     * @returns a number, which is the hash value calculated for the given key.
     */
    protected _murmurStringHashFn<K>(key: K): number;
    /**
     * The _hash function takes a key and returns a number.
     * @param {K} key - The parameter "key" is of type K, which represents the type of the key that will be hashed.
     * @returns The hash function is returning a number.
     */
    protected _hash(key: K): number;
    /**
     * The function calculates a hash value for a given string using the djb2 algorithm.
     * @param {string} key - The `key` parameter in the `stringHash` function is a string value that represents the input for
     * which we want to calculate the hash value.
     * @returns a number, which is the hash value of the input string.
     */
    protected _stringHash(key: string): number;
    /**
     * The function `_objectHash` takes a key and returns a hash value, using a custom hash function for objects.
     * @param {K} key - The parameter "key" is of type "K", which means it can be any type. It could be a string, number,
     * boolean, object, or any other type of value. The purpose of the objectHash function is to generate a hash value for
     * the key, which can be used for
     * @returns a number, which is the hash value of the key.
     */
    protected _objectHash(key: K): number;
    /**
     * The `expand` function increases the capacity of a hash table by creating a new array of buckets with double the
     * capacity and rehashing all the existing key-value pairs into the new buckets.
     */
    protected _expand(): void;
}
