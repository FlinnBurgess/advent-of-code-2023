/**
 * data-structure-typed
 *
 * @author Tyler Zeng
 * @copyright Copyright (c) 2022 Tyler Zeng <zrwusa@gmail.com>
 * @license MIT License
 */
import type { ElementCallback } from '../../types';
import { IterableElementBase } from '../base';
export declare class DoublyLinkedListNode<E = any> {
    value: E;
    next: DoublyLinkedListNode<E> | undefined;
    prev: DoublyLinkedListNode<E> | undefined;
    /**
     * The constructor function initializes the value, next, and previous properties of an object.
     * @param {E} value - The "value" parameter is the value that will be stored in the node. It can be of any data type, as it
     * is defined as a generic type "E".
     */
    constructor(value: E);
}
/**
 * 1. Node Structure: Each node contains three parts: a data field, a pointer (or reference) to the previous node, and a pointer to the next node. This structure allows traversal of the linked list in both directions.
 * 2. Bidirectional Traversal: Unlike singly linked lists, doubly linked lists can be easily traversed forwards or backwards. This makes insertions and deletions in the list more flexible and efficient.
 * 3. No Centralized Index: Unlike arrays, elements in a linked list are not stored contiguously, so there is no centralized index. Accessing elements in a linked list typically requires traversing from the head or tail node.
 * 4. High Efficiency in Insertion and Deletion: Adding or removing elements in a linked list does not require moving other elements, making these operations more efficient than in arrays.
 */
export declare class DoublyLinkedList<E = any> extends IterableElementBase<E> {
    /**
     * The constructor initializes the linked list with an empty head, tail, and size.
     */
    constructor(elements?: Iterable<E>);
    protected _head: DoublyLinkedListNode<E> | undefined;
    get head(): DoublyLinkedListNode<E> | undefined;
    protected _tail: DoublyLinkedListNode<E> | undefined;
    get tail(): DoublyLinkedListNode<E> | undefined;
    protected _size: number;
    get size(): number;
    /**
     * Time Complexity: O(n), where n is the size of the input array.
     * Space Complexity: O(n)
     */
    /**
     * Time Complexity: O(n), where n is the size of the input array.
     * Space Complexity: O(n)
     *
     * The `fromArray` function creates a new instance of a DoublyLinkedList and populates it with the elements from the
     * given array.
     * @param {E[]} data - The `data` parameter is an array of elements of type `E`.
     * @returns The `fromArray` function returns a DoublyLinkedList object.
     */
    static fromArray<E>(data: E[]): DoublyLinkedList<E>;
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     *
     * The push function adds a new node with the given value to the end of the doubly linked list.
     * @param {E} value - The value to be added to the linked list.
     */
    push(value: E): boolean;
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     *
     * The `pop()` function removes and returns the value of the last node in a doubly linked list.
     * @returns The method is returning the value of the removed node (removedNode.value) if the list is not empty. If the
     * list is empty, it returns undefined.
     */
    pop(): E | undefined;
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     *
     * The `shift()` function removes and returns the value of the first node in a doubly linked list.
     * @returns The method `shift()` returns the value of the node that is removed from the beginning of the doubly linked
     * list.
     */
    shift(): E | undefined;
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     *
     * The unshift function adds a new node with the given value to the beginning of a doubly linked list.
     * @param {E} value - The `value` parameter represents the value of the new node that will be added to the beginning of the
     * doubly linked list.
     */
    unshift(value: E): boolean;
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     *
     * The `getAt` function returns the value at a specified index in a linked list, or undefined if the index is out of bounds.
     * @param {number} index - The index parameter is a number that represents the position of the element we want to
     * retrieve from the list.
     * @returns The method is returning the value at the specified index in the linked list. If the index is out of bounds
     * or the linked list is empty, it will return undefined.
     */
    getAt(index: number): E | undefined;
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     *
     * The function `getNodeAt` returns the node at a given index in a doubly linked list, or undefined if the index is out of
     * range.
     * @param {number} index - The `index` parameter is a number that represents the position of the node we want to
     * retrieve from the doubly linked list. It indicates the zero-based index of the node we want to access.
     * @returns The method `getNodeAt(index: number)` returns a `DoublyLinkedListNode<E>` object if the index is within the
     * valid range of the linked list, otherwise it returns `undefined`.
     */
    getNodeAt(index: number): DoublyLinkedListNode<E> | undefined;
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     *
     * The function `findNodeByValue` searches for a node with a specific value in a doubly linked list and returns the
     * node if found, otherwise it returns undefined.
     * @param {E} value - The `value` parameter is the value that we want to search for in the doubly linked list.
     * @returns The function `findNodeByValue` returns a `DoublyLinkedListNode<E>` if a node with the specified value `value`
     * is found in the linked list. If no such node is found, it returns `undefined`.
     */
    getNode(value: E | undefined): DoublyLinkedListNode<E> | undefined;
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     *
     * The `insert` function inserts a value at a specified index in a doubly linked list.
     * @param {number} index - The index parameter represents the position at which the new value should be inserted in the
     * DoublyLinkedList. It is of type number.
     * @param {E} value - The `value` parameter represents the value that you want to insert into the Doubly Linked List at the
     * specified index.
     * @returns The `insert` method returns a boolean value. It returns `true` if the insertion is successful, and `false`
     * if the index is out of bounds.
     */
    addAt(index: number, value: E): boolean;
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     *
     * The `addBefore` function inserts a new value before an existing value or node in a doubly linked list.
     * @param {E | DoublyLinkedListNode<E>} existingValueOrNode - The existing value or node in the doubly linked list
     * before which the new value will be inserted. It can be either the value of the existing node or the existing node
     * itself.
     * @param {E} newValue - The `newValue` parameter represents the value that you want to insert into the doubly linked
     * list.
     * @returns The method returns a boolean value. It returns `true` if the insertion is successful, and `false` if the
     * insertion fails.
     */
    addBefore(existingValueOrNode: E | DoublyLinkedListNode<E>, newValue: E): boolean;
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     *
     * The `addAfter` function inserts a new node with a given value after an existing node in a doubly linked list.
     * @param {E | DoublyLinkedListNode<E>} existingValueOrNode - The existing value or node in the doubly linked list
     * after which the new value will be inserted. It can be either the value of the existing node or the existing node
     * itself.
     * @param {E} newValue - The value that you want to insert into the doubly linked list.
     * @returns The method returns a boolean value. It returns true if the insertion is successful, and false if the
     * existing value or node is not found in the doubly linked list.
     */
    addAfter(existingValueOrNode: E | DoublyLinkedListNode<E>, newValue: E): boolean;
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     *
     * The `deleteAt` function removes an element at a specified index from a linked list and returns the removed element.
     * @param {number} index - The index parameter represents the position of the element that needs to be deleted in the
     * data structure. It is of type number.
     * @returns The method `deleteAt` returns the value of the node that was deleted, or `undefined` if the index is out of
     * bounds.
     */
    deleteAt(index: number): boolean;
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     *
     * The `delete` function removes a node from a doubly linked list based on either the node itself or its value.
     * @param {E | DoublyLinkedListNode<E>} valOrNode - The `valOrNode` parameter can accept either a value of type `E` or
     * a `DoublyLinkedListNode<E>` object.
     * @returns The `delete` method returns a boolean value. It returns `true` if the value or node was successfully
     * deleted from the doubly linked list, and `false` if the value or node was not found in the list.
     */
    delete(valOrNode: E | DoublyLinkedListNode<E> | undefined): boolean;
    /**
     * The function checks if a variable has a size greater than zero and returns a boolean value.
     * @returns A boolean value is being returned.
     */
    isEmpty(): boolean;
    /**
     * The `clear` function resets the linked list by setting the head, tail, and size to undefined and 0 respectively.
     */
    clear(): void;
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     *
     * The `find` function iterates through a linked list and returns the first element that satisfies a given condition.
     * @param callback - A function that takes a value of type E as its parameter and returns a boolean value. This
     * function is used to determine whether a particular value in the linked list satisfies a certain condition.
     * @returns The method `find` returns the first element in the linked list that satisfies the condition specified by
     * the callback function. If no element satisfies the condition, it returns `undefined`.
     */
    find(callback: (value: E) => boolean): E | undefined;
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     *
     * The function returns the index of the first occurrence of a given value in a linked list.
     * @param {E} value - The parameter `value` is of type `E`, which means it can be any data type. It represents the value
     * that we are searching for in the linked list.
     * @returns The method `indexOf` returns the index of the first occurrence of the specified value `value` in the linked
     * list. If the value is not found, it returns -1.
     */
    indexOf(value: E): number;
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     *
     * The `findBackward` function iterates through a linked list from the last node to the first node and returns the last
     * value that satisfies the given callback function, or undefined if no value satisfies the callback.
     * @param callback - A function that takes a value of type E as its parameter and returns a boolean value. This
     * function is used to determine whether a given value satisfies a certain condition.
     * @returns The method `findBackward` returns the last value in the linked list that satisfies the condition specified by
     * the callback function. If no value satisfies the condition, it returns `undefined`.
     */
    findBackward(callback: (value: E) => boolean): E | undefined;
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     *
     * The `reverse` function reverses the order of the elements in a doubly linked list.
     */
    reverse(): this;
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(n)
     */
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(n)
     *
     * The `toArray` function converts a linked list into an array.
     * @returns The `toArray()` method is returning an array of type `E[]`.
     */
    toArray(): E[];
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(n)
     */
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(n)
     *
     * The `toReversedArray` function converts a doubly linked list into an array in reverse order.
     * @returns The `toReversedArray()` function returns an array of type `E[]`.
     */
    toReversedArray(): E[];
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(n)
     */
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(n)
     *
     * The `filter` function creates a new DoublyLinkedList by iterating over the elements of the current
     * list and applying a callback function to each element, returning only the elements for which the
     * callback function returns true.
     * @param callback - The `callback` parameter is a function that will be called for each element in
     * the DoublyLinkedList. It takes three arguments: the current element, the index of the current
     * element, and the DoublyLinkedList itself. The callback function should return a boolean value
     * indicating whether the current element should be included
     * @param {any} [thisArg] - The `thisArg` parameter is an optional argument that specifies the value
     * to be used as `this` when executing the `callback` function. If `thisArg` is provided, it will be
     * passed as the `this` value to the `callback` function. If `thisArg` is
     * @returns The `filter` method is returning a new `DoublyLinkedList` object that contains the
     * elements that pass the filter condition specified by the `callback` function.
     */
    filter(callback: ElementCallback<E, boolean>, thisArg?: any): DoublyLinkedList<E>;
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(n)
     */
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(n)
     *
     * The `map` function creates a new DoublyLinkedList by applying a callback function to each element
     * in the original list.
     * @param callback - The callback parameter is a function that will be called for each element in the
     * DoublyLinkedList. It takes three arguments: the current element, the index of the current element,
     * and the DoublyLinkedList itself. The callback function should return a value that will be added to
     * the new DoublyLinkedList that
     * @param {any} [thisArg] - The `thisArg` parameter is an optional argument that specifies the value
     * to be used as `this` when executing the `callback` function. If `thisArg` is provided, it will be
     * passed as the `this` value to the `callback` function. If `thisArg` is
     * @returns The `map` function is returning a new `DoublyLinkedList` object that contains the results
     * of applying the provided `callback` function to each element in the original `DoublyLinkedList`
     * object.
     */
    map<T>(callback: ElementCallback<E, T>, thisArg?: any): DoublyLinkedList<T>;
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     *
     * The addLast function adds a new node with the given value to the end of the doubly linked list.
     * @param {E} value - The value to be added to the linked list.
     */
    addLast(value: E): boolean;
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     *
     * The `pollLast()` function removes and returns the value of the last node in a doubly linked list.
     * @returns The method is returning the value of the removed node (removedNode.value) if the list is not empty. If the
     * list is empty, it returns undefined.
     */
    pollLast(): E | undefined;
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     *
     * The `pollFirst()` function removes and returns the value of the first node in a doubly linked list.
     * @returns The method `shift()` returns the value of the node that is removed from the beginning of the doubly linked
     * list.
     */
    pollFirst(): E | undefined;
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     *
     * The addFirst function adds a new node with the given value to the beginning of a doubly linked list.
     * @param {E} value - The `value` parameter represents the value of the new node that will be added to the beginning of the
     * doubly linked list.
     */
    addFirst(value: E): void;
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     *
     * The `get first` function returns the first node in a doubly linked list, or undefined if the list is empty.
     * @returns The method `get first()` returns the first node of the doubly linked list, or `undefined` if the list is empty.
     */
    get first(): E | undefined;
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(n), where n is the number of elements in the linked list.
     * Space Complexity: O(1)
     *
     * The `get last` function returns the last node in a doubly linked list, or undefined if the list is empty.
     * @returns The method `get last()` returns the last node of the doubly linked list, or `undefined` if the list is empty.
     */
    get last(): E | undefined;
    /**
     * The function returns an iterator that iterates over the values of a linked list.
     */
    protected _getIterator(): IterableIterator<E>;
}
