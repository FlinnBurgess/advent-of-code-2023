/**
 * data-structure-typed
 *
 * @author Tyler Zeng
 * @copyright Copyright (c) 2022 Tyler Zeng <zrwusa@gmail.com>
 * @license MIT License
 */
import type { ElementCallback, IterableWithSizeOrLength } from "../../types";
import { IterableElementBase } from "../base";
/**
 * 1. Operations at Both Ends: Supports adding and removing elements at both the front and back of the queue. This allows it to be used as a stack (last in, first out) and a queue (first in, first out).
 * 2. Efficient Random Access: Being based on an array, it offers fast random access capability, allowing constant time access to any element.
 * 3. Continuous Memory Allocation: Since it is based on an array, all elements are stored contiguously in memory, which can bring cache friendliness and efficient memory access.
 * 4. Efficiency: Adding and removing elements at both ends of a deque is usually very fast. However, when the dynamic array needs to expand, it may involve copying the entire array to a larger one, and this operation has a time complexity of O(n).
 * 5. Performance jitter: Deque may experience performance jitter, but DoublyLinkedList will not
 */
export declare class Deque<E> extends IterableElementBase<E> {
    protected _bucketFirst: number;
    protected _firstInBucket: number;
    protected _bucketLast: number;
    protected _lastInBucket: number;
    protected _bucketCount: number;
    protected readonly _bucketSize: number;
    /**
     * The constructor initializes a data structure with a specified bucket size and populates it with
     * elements from an iterable.
     * @param elements - The `elements` parameter is an iterable object (such as an array or a Set) that
     * contains the initial elements to be stored in the data structure. It can also be an object with a
     * `length` property or a `size` property, which represents the number of elements in the iterable.
     * @param bucketSize - The `bucketSize` parameter is the maximum number of elements that can be
     * stored in each bucket. It determines the size of each bucket in the data structure.
     */
    constructor(elements?: IterableWithSizeOrLength<E>, bucketSize?: number);
    protected _buckets: E[][];
    get buckets(): E[][];
    protected _size: number;
    get size(): number;
    /**
     * The function returns the first element in a collection if it exists, otherwise it returns
     * undefined.
     * @returns The first element of the collection, of type E, is being returned.
     */
    get first(): E | undefined;
    get last(): E | undefined;
    /**
     * Time Complexity - Amortized O(1) (possible reallocation)
     * Space Complexity - O(n) (due to potential resizing).
     */
    /**
     * Time Complexity - Amortized O(1) (possible reallocation),
     * Space Complexity - O(n) (due to potential resizing).
     *
     * The push function adds an element to a data structure and reallocates memory if necessary.
     * @param {E} element - The `element` parameter represents the value that you want to add to the data
     * structure.
     * @returns The size of the data structure after the element has been pushed.
     */
    push(element: E): boolean;
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     *
     * The `pop()` function removes and returns the last element from a data structure, updating the
     * internal state variables accordingly.
     * @returns The element that was removed from the data structure is being returned.
     */
    pop(): E | undefined;
    /**
     * Time Complexity: Amortized O(1)
     * Space Complexity: O(n)
     */
    /**
     * Time Complexity: Amortized O(1)
     * Space Complexity: O(n)
     *
     * The `unshift` function adds an element to the beginning of an array-like data structure and
     * returns the new size of the structure.
     * @param {E} element - The `element` parameter represents the element that you want to add to the
     * beginning of the data structure.
     * @returns The size of the data structure after the element has been added.
     */
    unshift(element: E): boolean;
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     *
     * The `shift()` function removes and returns the first element from a data structure, updating the
     * internal state variables accordingly.
     * @returns The element that is being removed from the beginning of the data structure is being
     * returned.
     */
    shift(): E | undefined;
    /**
     * Time Complexity: O(1) - Removes the last element.
     * Space Complexity: O(1) - Operates in-place.
     */
    isEmpty(): boolean;
    /**
     * The clear() function resets the state of the object by initializing all variables to their default
     * values.
     */
    clear(): void;
    /**
     * The below function is a generator that yields elements from a collection one by one.
     */
    begin(): Generator<E>;
    /**
     * The function `reverseBegin()` is a generator that yields elements in reverse order starting from
     * the last element.
     */
    reverseBegin(): Generator<E>;
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     *
     * The `getAt` function retrieves an element at a specified position in an array-like data structure.
     * @param {number} pos - The `pos` parameter represents the position of the element that you want to
     * retrieve from the data structure. It is of type `number` and should be a valid index within the
     * range of the data structure.
     * @returns The element at the specified position in the data structure is being returned.
     */
    getAt(pos: number): E;
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     *
     * The `setAt` function sets an element at a specific position in an array-like data structure.
     * @param {number} pos - The `pos` parameter represents the position at which the element needs to be
     * set. It is of type `number`.
     * @param {E} element - The `element` parameter is the value that you want to set at the specified
     * position in the data structure.
     */
    setAt(pos: number, element: E): boolean;
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(n)
     */
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(n)
     *
     * The `addAt` function inserts one or more elements at a specified position in an array-like data
     * structure.
     * @param {number} pos - The `pos` parameter represents the position at which the element(s) should
     * be inserted. It is of type `number`.
     * @param {E} element - The `element` parameter represents the element that you want to insert into
     * the array at the specified position.
     * @param [num=1] - The `num` parameter represents the number of times the `element` should be
     * inserted at the specified position (`pos`). By default, it is set to 1, meaning that the `element`
     * will be inserted once. However, you can provide a different value for `num` if you want
     * @returns The size of the array after the insertion is being returned.
     */
    addAt(pos: number, element: E, num?: number): boolean;
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     *
     * The `cut` function updates the state of the object based on the given position and returns the
     * updated size.
     * @param {number} pos - The `pos` parameter represents the position at which the string should be
     * cut. It is a number that indicates the index of the character where the cut should be made.
     * @returns The method is returning the updated size of the data structure.
     */
    cut(pos: number): number;
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(1)
     *
     * The `deleteAt` function removes an element at a specified position in an array-like data
     * structure.
     * @param {number} pos - The `pos` parameter in the `deleteAt` function represents the position at
     * which an element needs to be deleted from the data structure. It is of type `number` and indicates
     * the index of the element to be deleted.
     * @returns The size of the data structure after the deletion operation is performed.
     */
    deleteAt(pos: number): boolean;
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(1)
     *
     * The `delete` function removes all occurrences of a specified element from an array-like data
     * structure.
     * @param {E} element - The `element` parameter represents the element that you want to delete from
     * the data structure.
     * @returns The size of the data structure after the element has been deleted.
     */
    delete(element: E): boolean;
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(1)
     *
     * The reverse() function reverses the order of the buckets and the elements within each bucket in a
     * data structure.
     * @returns The reverse() method is returning the object itself (this) after performing the reverse
     * operation on the buckets and updating the relevant properties.
     */
    reverse(): this;
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(1)
     *
     * The `unique()` function removes duplicate elements from an array-like data structure and returns
     * the number of unique elements.
     * @returns The size of the modified array is being returned.
     */
    unique(): this;
    /**
     * Time Complexity: O(n log n)
     * Space Complexity: O(n)
     */
    /**
     * Time Complexity: O(n log n)
     * Space Complexity: O(n)
     *
     * The `sort` function sorts the elements in a data structure using a provided comparator function.
     * @param [comparator] - The `comparator` parameter is a function that takes in two elements `x` and
     * `y` of type `E` and returns a number. The comparator function is used to determine the order of
     * the elements in the sorted array.
     * @returns Deque<E>
     */
    sort(comparator?: (x: E, y: E) => number): this;
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(n)
     */
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(n)
     *
     * The `shrinkToFit` function reorganizes the elements in an array-like data structure to minimize
     * memory usage.
     * @returns Nothing is being returned. The function is using the `return` statement to exit early if
     * `this.size` is 0, but it does not return any value.
     */
    shrinkToFit(): void;
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(1)
     *
     * The `find` function iterates over the elements in a deque and returns the first element for which
     * the callback function returns true, or undefined if no such element is found.
     * @param callback - A function that takes three parameters: element, index, and deque. It should
     * return a boolean value indicating whether the element satisfies a certain condition.
     * @returns The method `find` returns the first element in the deque that satisfies the condition
     * specified by the callback function. If no element satisfies the condition, it returns `undefined`.
     */
    find(callback: (element: E, index: number, deque: Deque<E>) => boolean): E | undefined;
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(1)
     *
     * The function "indexOf" returns the index of the first occurrence of a given element in an array,
     * or -1 if the element is not found.
     * @param {E} element - The "element" parameter represents the element that you want to find the
     * index of in the data structure.
     * @returns The indexOf function returns the index of the first occurrence of the specified element
     * in the data structure. If the element is not found, it returns -1.
     */
    indexOf(element: E): number;
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(n)
     */
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(n)
     *
     * The `toArray` function converts the elements of a data structure into an array.
     * @returns The `toArray()` method is returning an array of elements of type `E`.
     */
    toArray(): E[];
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(n)
     */
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(n)
     *
     * The `filter` function creates a new deque containing elements from the original deque that satisfy
     * a given predicate function.
     * @param predicate - The `predicate` parameter is a callback function that takes three arguments:
     * the current element being iterated over, the index of the current element, and the deque itself.
     * It should return a boolean value indicating whether the element should be included in the filtered
     * deque or not.
     * @param {any} [thisArg] - The `thisArg` parameter is an optional argument that specifies the value
     * to be used as `this` when executing the `predicate` function. If `thisArg` is provided, it will be
     * passed as the `this` value to the `predicate` function. If `thisArg` is
     * @returns The `filter` method is returning a new `Deque` object that contains the elements that
     * satisfy the given predicate function.
     */
    filter(predicate: ElementCallback<E, boolean>, thisArg?: any): Deque<E>;
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(n)
     */
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(n)
     *
     * The `map` function creates a new Deque by applying a callback function to each element of the
     * original Deque.
     * @param callback - The `callback` parameter is a function that will be called for each element in
     * the deque. It takes three arguments:
     * @param {any} [thisArg] - The `thisArg` parameter is an optional argument that specifies the value
     * to be used as `this` when executing the `callback` function. If `thisArg` is provided, it will be
     * passed as the `this` value to the `callback` function. If `thisArg` is
     * @returns a new Deque object with the mapped values.
     */
    map<T>(callback: ElementCallback<E, T>, thisArg?: any): Deque<T>;
    /**
     * Time Complexity: Amortized O(1) - Similar to push, resizing leads to O(n).
     * Space Complexity: O(n) - Due to potential resizing.
     */
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(n) - In worst case, resizing doubles the array size.
     *
     * The addLast function adds an element to the end of an array.
     * @param {E} element - The element parameter represents the element that you want to add to the end of the
     * data structure.
     */
    addLast(element: E): boolean;
    /**
     * Time Complexity: O(1) - Removes the first element.
     * Space Complexity: O(1) - In-place operation.
     */
    /**
     * Time Complexity: O(1) - Removes the last element.
     * Space Complexity: O(1) - Operates in-place.
     *
     * The function "pollLast" removes and returns the last element of an array.
     * @returns The last element of the array is being returned.
     */
    pollLast(): E | undefined;
    /**
     * Time Complexity: O(1).
     * Space Complexity: O(n) - Due to potential resizing.
     *
     * The "addFirst" function adds an element to the beginning of an array.
     * @param {E} element - The parameter "element" represents the element that you want to add to the
     * beginning of the data structure.
     */
    addFirst(element: E): boolean;
    /**
     * Time Complexity: O(1) - Removes the first element.
     * Space Complexity: O(1) - In-place operation.
     *
     * The function "pollFirst" removes and returns the first element of an array.
     * @returns The method `pollFirst()` is returning the first element of the array after removing it
     * from the beginning. If the array is empty, it will return `undefined`.
     */
    pollFirst(): E | undefined;
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(1)
     *
     * The above function is an implementation of the iterator protocol in TypeScript, allowing the
     * object to be iterated over using a for...of loop.
     */
    protected _getIterator(): IterableIterator<E>;
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(n)
     */
    /**
     * Time Complexity: O(n)
     * Space Complexity: O(n)
     *
     * The `_reallocate` function reallocates the buckets in an array, adding new buckets if needed.
     * @param {number} [needBucketNum] - The `needBucketNum` parameter is an optional number that
     * specifies the number of new buckets needed. If not provided, it will default to half of the
     * current bucket count (`this._bucketCount >> 1`) or 1 if the current bucket count is less than 2.
     */
    protected _reallocate(needBucketNum?: number): void;
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     */
    /**
     * Time Complexity: O(1)
     * Space Complexity: O(1)
     *
     * The function calculates the bucket index and index within the bucket based on the given position.
     * @param {number} pos - The `pos` parameter represents the position within the data structure. It is
     * a number that indicates the index or position of an element within the structure.
     * @returns an object with two properties: "bucketIndex" and "indexInBucket".
     */
    protected _getBucketAndPosition(pos: number): {
        bucketIndex: number;
        indexInBucket: number;
    };
}
