/**
 * data-structure-typed
 *
 * @author Tyler Zeng
 * @copyright Copyright (c) 2022 Tyler Zeng <zrwusa@gmail.com>
 * @license MIT License
 */
import type { Thunk, ToThunkFn, TrlAsyncFn, TrlFn } from '../types';
export declare const uuidV4: () => string;
export declare const arrayRemove: <T>(array: T[], predicate: (item: T, index: number, array: T[]) => boolean) => T[];
export declare const THUNK_SYMBOL: unique symbol;
export declare const isThunk: (fnOrValue: any) => boolean;
export declare const toThunk: (fn: ToThunkFn) => Thunk;
export declare const trampoline: (fn: TrlFn) => ((...args: [...Parameters<TrlFn>]) => any) & {
    cont: (...args: [...Parameters<TrlFn>]) => Thunk;
};
export declare const trampolineAsync: (fn: TrlAsyncFn) => ((...args: [...Parameters<TrlAsyncFn>]) => Promise<any>) & {
    cont: (...args: [...Parameters<TrlAsyncFn>]) => Thunk;
};
export declare const getMSB: (value: number) => number;
export declare const rangeCheck: (index: number, min: number, max: number, message?: string) => void;
export declare const throwRangeError: (message?: string) => void;
export declare const isWeakKey: (input: unknown) => input is object;
export declare const calcMinUnitsRequired: (totalQuantity: number, unitSize: number) => number;
